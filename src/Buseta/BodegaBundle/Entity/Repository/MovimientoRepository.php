<?php

namespace Buseta\BodegaBundle\Entity\Repository;

use Buseta\BodegaBundle\Form\Model\MovimientoFilterModel;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * MovimientoRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovimientoRepository extends EntityRepository
{
    public function filter(MovimientoFilterModel $filter = null)
    {
        $qb = $this->createQueryBuilder('m');
        $query = $qb->where($qb->expr()->eq(true,true));

        if($filter) {
            if ($filter->getProducto() !== null && $filter->getProducto() !== '') {
                $query->innerJoin('m.movimientos_productos', 'movimientos_productos')
                    ->where($qb->expr()->andX(
                        $qb->expr()->eq('movimientos_productos.producto',':producto')
                    ))
                    ->setParameter('producto', $filter->getProducto());
            }
            if ($filter->getAlmacenOrigen() !== null && $filter->getAlmacenOrigen() !== '') {
                $query->andWhere($query->expr()->eq('m.almacenOrigen', ':almacenOrigen'))
                    ->setParameter('almacenOrigen', $filter->getAlmacenOrigen());
            }
            if ($filter->getAlmacenDestino() !== null && $filter->getAlmacenDestino() !== '') {
                $query->andWhere($query->expr()->eq('m.almacenDestino', ':almacenDestino'))
                    ->setParameter('almacenDestino', $filter->getAlmacenDestino());
            }
            if ($filter->getFechaInicio() !== null && $filter->getFechaInicio() !== '') {
                $query->andWhere($qb->expr()->gte('m.fechaMovimiento',':fechaInicio'))
                    ->setParameter('fechaInicio', $filter->getFechaInicio());
            }
            if ($filter->getFechaFin() !== null && $filter->getFechaFin() !== '') {
                $query->andWhere($qb->expr()->lte('m.fechaMovimiento',':fechaFin'))
                    ->setParameter('fechaFin', $filter->getFechaFin());
            }
            if ($filter->getEstado() !== null && $filter->getEstado() !== '') {
                $query->andWhere($query->expr()->eq('m.estado_documento', ':estado'))
                    ->setParameter('estado', $filter->getEstado());
            }

        }

        $query->orderBy('m.id', 'ASC');

        try {
            return $query->getQuery();
        } catch (NoResultException $e) {
            return array();
        }
    }

    public function busquedaAvanzada($page, $cantResult, $filter = array(), $orderBy = null)
    {
        $q = 'SELECT p FROM BusetaBodegaBundle:Movimiento p WHERE p.id != 0';

        //Obteniendo resto de la consulta dql
        $q .= $this->constructSubDQL($filter);

        //Estableciendo Order By
        if (empty($orderBy)) {
            $q .= ' ORDER BY p.id DESC';
        } else {
            $q .= ' ORDER BY '.$orderBy;
        }

        $maxResult = $this->getNotDeletedMaxResult($filter);
        $firstResult = $page * $cantResult;

        if ($firstResult > $maxResult) {
            $firstResult = 0;
            $page = 0;
        }

        //Valores de navegaci√≥n
        if ($maxResult < $cantResult) {
            $last = 0;
        } elseif ($maxResult % $cantResult > 0) {
            $last = floor($maxResult / $cantResult);
        } else {
            $last = floor($maxResult / $cantResult) - 1;
        }

        if ($last < 0) {
            $last = 0;
        }
        $next = ($page != $last) ? true : false;
        $prev = ($page != 0) ? true : false;
        $first = ($page == 0) ? false : true;

        $query = $this->_em->createQuery($q);
        $query->setMaxResults($cantResult);
        $query->setFirstResult($firstResult);

        try {
            $results = $query->getResult();

            return array(
                'results' => $results,
                'paginacion' => array(
                    'next' => $next,
                    'prev' => $prev,
                    'first' => $first,
                    'last' => $last,
                ),
            );
        } catch (NoResultException $e) {
            return array(
                'results' => array(),
                'paginacion' => array(),
            );
        }
    }

    public function getNotDeletedMaxResult($filter)
    {
        $q = 'SELECT COUNT(p) FROM BusetaBodegaBundle:Movimiento p WHERE p.id != 0';
        $q .= $this->constructSubDQL($filter);

        $query = $this->_em->createQuery($q);
        try {
            return $query->getSingleScalarResult();
        } catch (NoResultException $e) {
            return false;
        }
    }

    public function constructSubDQL($filter)
    {
        $q = '';

        if (isset($filter['fechaInicio']) && !empty($filter['fechaInicio'])) {
            $q .= " AND p.fechaMovimiento <= '".$filter['fechaInicio']."' ";
        }

        if (isset($filter['fechaFin']) && !empty($filter['fechaFin'])) {
            $q .= " AND p.fechaMovimiento <= '".$filter['fechaFin']."' ";
        }

        if (isset($filter['almacenOrigen']) && !empty($filter['almacenOrigen'])) {
            $results = $this->_em->getRepository('BusetaBodegaBundle:Bodega')->searchByValor($filter['almacenOrigen']);

            if (count($results) != 0) {
                $q .= " AND p.almacenOrigen = ".$results[0]->getId()." ";
            } else {
                $q .= " AND p.almacenOrigen = -1 ";
            }
        }

        if (isset($filter['almacenDestino']) && !empty($filter['almacenDestino'])) {
            $results = $this->_em->getRepository('BusetaBodegaBundle:Bodega')->searchByValor($filter['almacenDestino']);

            if (count($results) != 0) {
                $q .= " AND p.almacenDestino = ".$results[0]->getId()." ";
            } else {
                $q .= " AND p.almacenDestino = -1 ";
            }
        }

        if (isset($filter['categoriaProducto']) && !empty($filter['categoriaProducto'])) {
            $results = $this->_em->getRepository('BusetaBodegaBundle:CategoriaProducto')->searchByValor($filter['categoriaProducto']);

            if (count($results) != 0) {
                $q .= " AND p.categoriaProducto = ".$results[0]->getId()." ";
            } else {
                $q .= " AND p.categoriaProducto = -1 ";
            }
        }

        return $q;
    }
}
